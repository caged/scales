/* src/app/ScaleInfo.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	svg_element,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import { scalePoint, range } from "../_snowpack/pkg/d3.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

// (21:0) {#if scale}
function create_if_block(ctx) {
	let div;
	let if_block = /*width*/ ctx[2] && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			/*div_binding*/ ctx[6](div);
		},
		p(ctx, dirty) {
			if (/*width*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			/*div_binding*/ ctx[6](null);
		}
	};
}

// (23:4) {#if width}
function create_if_block_1(ctx) {
	let svg;
	let svg_viewBox_value;
	let each_value = /*scale*/ ctx[0].notes();
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			svg = svg_element("svg");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(svg, "viewBox", svg_viewBox_value = "0 0 " + /*width*/ ctx[2] + " " + /*height*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, svg, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(svg, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*dotX, scale*/ 17) {
				each_value = /*scale*/ ctx[0].notes();
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(svg, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*width, height*/ 12 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*width*/ ctx[2] + " " + /*height*/ ctx[3])) {
				attr(svg, "viewBox", svg_viewBox_value);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (25:8) {#each scale.notes() as note, i}
function create_each_block(ctx) {
	let g;
	let circle;
	let circle_fill_value;
	let text0;
	let t0_value = /*note*/ ctx[9].name + "";
	let t0;
	let text1;
	let t1_value = /*note*/ ctx[9].interval + "";
	let t1;
	let g_transform_value;

	return {
		c() {
			g = svg_element("g");
			circle = svg_element("circle");
			text0 = svg_element("text");
			t0 = text(t0_value);
			text1 = svg_element("text");
			t1 = text(t1_value);
			attr(circle, "r", "12");

			attr(circle, "fill", circle_fill_value = /*note*/ ctx[9].interval === "1P"
			? "rgb(50, 50, 50)"
			: "rgb(87, 45, 146)");

			attr(text0, "text-anchor", "middle");
			attr(text0, "dy", "4");
			attr(text0, "font-size", "10");
			attr(text0, "class", "text-white");
			attr(text0, "fill", "currentColor");
			attr(text1, "text-anchor", "middle");
			attr(text1, "dy", "25");
			attr(text1, "font-size", "10");
			attr(text1, "class", "text-black");
			attr(text1, "fill", "currentColor");
			attr(g, "transform", g_transform_value = "translate(" + /*dotX*/ ctx[4](/*i*/ ctx[11]) + ", " + 20 + ")");
		},
		m(target, anchor) {
			insert(target, g, anchor);
			append(g, circle);
			append(g, text0);
			append(text0, t0);
			append(g, text1);
			append(text1, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*scale*/ 1 && circle_fill_value !== (circle_fill_value = /*note*/ ctx[9].interval === "1P"
			? "rgb(50, 50, 50)"
			: "rgb(87, 45, 146)")) {
				attr(circle, "fill", circle_fill_value);
			}

			if (dirty & /*scale*/ 1 && t0_value !== (t0_value = /*note*/ ctx[9].name + "")) set_data(t0, t0_value);
			if (dirty & /*scale*/ 1 && t1_value !== (t1_value = /*note*/ ctx[9].interval + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(g);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*scale*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*scale*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { scale } = $$props;
	let { position = null } = $$props;
	let container;
	let width;
	let height;
	const margin = { top: 0, right: 20, bottom: 20, left: 20 };
	const dotX = scalePoint().domain(range(scale.notes().length));
	const startPosition = position;

	onMount(() => {
		$$invalidate(2, width = container.clientWidth);
		$$invalidate(3, height = 45);
		dotX.range([margin.left, width - margin.right]);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	$$self.$$set = $$props => {
		if ('scale' in $$props) $$invalidate(0, scale = $$props.scale);
		if ('position' in $$props) $$invalidate(5, position = $$props.position);
	};

	return [scale, container, width, height, dotX, position, div_binding];
}

class ScaleInfo extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { scale: 0, position: 5 });
	}
}

export default ScaleInfo;