import './PositionSelector.svelte.css.proxy.js';
/* src/app/PositionSelector.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (31:2) {#each { length: positions } as _, i}
function create_each_block(ctx) {
	let div;
	let input;
	let input_value_value;
	let t0;
	let span;
	let t1_value = /*i*/ ctx[9] + 1 + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			attr(input, "type", "radio");
			input.__value = input_value_value = /*i*/ ctx[9] + 1;
			input.value = input.__value;
			/*$$binding_groups*/ ctx[6][0].push(input);
			attr(span, "class", "mt-1 text-xs rounded-full svelte-f90a33");
			toggle_class(span, "selected", /*position*/ ctx[0] == /*i*/ ctx[9] + 1);
			toggle_class(span, "surrounding", /*isSurroundingPosition*/ ctx[3](/*i*/ ctx[9] + 1, /*position*/ ctx[0]));
			attr(div, "class", "flex flex-col text-center");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			input.checked = input.__value === /*position*/ ctx[0];
			append(div, t0);
			append(div, span);
			append(span, t1);
			append(div, t2);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[5]),
					listen(input, "click", /*toggleEnabled*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*position*/ 1) {
				input.checked = input.__value === /*position*/ ctx[0];
			}

			if (dirty & /*position*/ 1) {
				toggle_class(span, "selected", /*position*/ ctx[0] == /*i*/ ctx[9] + 1);
			}

			if (dirty & /*isSurroundingPosition, position*/ 9) {
				toggle_class(span, "surrounding", /*isSurroundingPosition*/ ctx[3](/*i*/ ctx[9] + 1, /*position*/ ctx[0]));
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input), 1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_value = { length: /*positions*/ ctx[1] };
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "flex space-x-5");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*position, isSurroundingPosition, toggleEnabled, positions*/ 15) {
				each_value = { length: /*positions*/ ctx[1] };
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let positions;
	let { scale } = $$props;
	let { position = null } = $$props;

	function toggleEnabled(event) {
		const { target } = event;

		if (position === +target.value) {
			$$invalidate(0, position = null);
			target.checked = false;
		}
	}

	function isSurroundingPosition(cur, pos) {
		if (!pos) return false;

		if (pos - 1 === 0) {
			return cur === positions || cur === pos + 1;
		}

		if (pos + 1 > positions) {
			return cur === 1 || cur === pos - 1;
		}

		return cur === pos - 1 || cur === pos + 1;
	}

	const $$binding_groups = [[]];

	function input_change_handler() {
		position = this.__value;
		$$invalidate(0, position);
	}

	$$self.$$set = $$props => {
		if ('scale' in $$props) $$invalidate(4, scale = $$props.scale);
		if ('position' in $$props) $$invalidate(0, position = $$props.position);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*scale*/ 16) {
			$: $$invalidate(1, positions = scale.intervals().length);
		}
	};

	return [
		position,
		positions,
		toggleEnabled,
		isSurroundingPosition,
		scale,
		input_change_handler,
		$$binding_groups
	];
}

class PositionSelector extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { scale: 4, position: 0 });
	}
}

export default PositionSelector;