/* src/app/ScaleChords.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { Scale, Chord, Note, Midi } from "../_snowpack/pkg/@tonaljs/tonal.js";
import { createEventDispatcher, getContext } from "../_snowpack/pkg/svelte.js";
import { tonic, tuning } from "./store.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (29:2) {#each Scale.scaleChords(scale.type()) as chordLabel}
function create_each_block(ctx) {
	let li;
	let t0_value = /*chordLabel*/ ctx[7] + "";
	let t0;
	let t1;
	let li_data_chord_value;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			attr(li, "class", "px-2 py-1 overflow-hidden whitespace-nowrap rounded-full text-center bg-gray-200 hover:bg-purple-600 hover:text-white cursor-pointer");
			attr(li, "data-chord", li_data_chord_value = /*chordLabel*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);

			if (!mounted) {
				dispose = listen(li, "mouseup", /*handleMouseUp*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*scale*/ 1 && t0_value !== (t0_value = /*chordLabel*/ ctx[7] + "")) set_data(t0, t0_value);

			if (dirty & /*scale*/ 1 && li_data_chord_value !== (li_data_chord_value = /*chordLabel*/ ctx[7])) {
				attr(li, "data-chord", li_data_chord_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let ul;
	let each_value = Scale.scaleChords(/*scale*/ ctx[0].type());
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "text-xs text-gray-500 grid grid-cols-4 xl:grid-cols-8 gap-2");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*Scale, scale, handleMouseUp*/ 3) {
				each_value = Scale.scaleChords(/*scale*/ ctx[0].type());
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $tonic;
	let $tuning;
	component_subscribe($$self, tonic, $$value => $$invalidate(2, $tonic = $$value));
	component_subscribe($$self, tuning, $$value => $$invalidate(3, $tuning = $$value));
	let { scale } = $$props;
	const lowestNote = Note.get($tuning[0]);
	const dispatch = createEventDispatcher();
	const { player } = getContext("app");

	function handleMouseUp(event) {
		const chordName = event.target.dataset.chord;
		const rootNote = Note.get(`${$tonic}${lowestNote.oct}`);

		const startNote = rootNote.height < lowestNote.height
		? Note.get(`${rootNote.name}${rootNote.oct + 1}`)
		: rootNote;

		const chord = Chord.getChord(chordName, startNote);
		const midi = chord.notes.map(Midi.toMidi);
		player.play(midi, 15);
		dispatch("chordchange", chord);
	}

	$$self.$$set = $$props => {
		if ('scale' in $$props) $$invalidate(0, scale = $$props.scale);
	};

	return [scale, handleMouseUp];
}

class ScaleChords extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { scale: 0 });
	}
}

export default ScaleChords;