/* src/app/NotePlayer.svelte generated by Svelte v3.46.4 */
import { SvelteComponent, init, safe_not_equal } from "../_snowpack/pkg/svelte/internal.js";

import { Chord, Range } from "../_snowpack/pkg/@tonaljs/tonal.js";
import { Howl, Howler } from "../_snowpack/pkg/howler.js";
import { delay as pauseFor } from "./utils.js";

function instance($$self, $$props, $$invalidate) {
	let { notes = "" } = $$props;
	let { delay = 20 } = $$props;

	const noteRange = sharps => Range.chromatic(["C1", "B5"], { sharps }).reduce(
		(acc, cur, i) => {
			acc[cur] = [i * 2000, 2000];
			return acc;
		},
		{}
	);

	const sharps = noteRange(true);
	const flats = noteRange();
	const allNotes = { ...sharps, ...flats };

	var sound = new Howl({
			src: "guitar-notes.mp3",
			sprite: allNotes
		});

	sound.volume(0.2);

	async function playNotes(notes) {
		const theNotes = [...notes];

		while (theNotes.length) {
			const note = theNotes.shift();
			sound.play(note.name);
			await pauseFor(delay);
		}
	}

	$$self.$$set = $$props => {
		if ('notes' in $$props) $$invalidate(0, notes = $$props.notes);
		if ('delay' in $$props) $$invalidate(1, delay = $$props.delay);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*notes*/ 1) {
			$: {
				playNotes(notes);
			}
		}
	};

	return [notes, delay];
}

class NotePlayer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, null, safe_not_equal, { notes: 0, delay: 1 });
	}
}

export default NotePlayer;