import './ScaleSelector.svelte.css.proxy.js';
/* src/app/ScaleSelector.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Select from "../_snowpack/pkg/svelte-select.js";
import { ScaleType } from "../_snowpack/pkg/@tonaljs/tonal.js";

function create_fragment(ctx) {
	let div;
	let select;
	let current;

	select = new Select({
			props: {
				items: /*scales*/ ctx[1],
				placeholder: "Select a scale...",
				containerClasses: "text-sm",
				containerStyles: "text-transform: capitalize",
				selectedValue: /*value*/ ctx[0],
				groupBy: /*groupBy*/ ctx[2]
			}
		});

	select.$on("select", /*handleSelect*/ ctx[3]);
	select.$on("clear", /*handleClear*/ ctx[4]);

	return {
		c() {
			div = element("div");
			create_component(select.$$.fragment);
			attr(div, "class", "themed w-full svelte-1g1zel4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(select, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const select_changes = {};
			if (dirty & /*value*/ 1) select_changes.selectedValue = /*value*/ ctx[0];
			select.$set(select_changes);
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(select);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { value } = $$props;
	const allScales = ScaleType.all();

	const commonScales = [
		"minor pentatonic",
		"major pentatonic",
		"minor",
		"major",
		"phrygian",
		"lydian",
		"mixolydian",
		"locrian",
		"harmonic minor",
		"phrygian dominant"
	].map(name => {
		return { group: "Popular", ...ScaleType.get(name) };
	});

	const otherScales = allScales.filter(a => !commonScales.find(b => {
		return b.setNum == a.setNum;
	})).map(s => {
		return { ...s, group: "Other" };
	});

	const scales = [...commonScales, ...otherScales].map(s => {
		return {
			label: `${s.name}${s.aliases.length ? " (" + s.aliases[0] + ")" : ""}`,
			value: s.name,
			group: s.group
		};
	});

	const groupBy = s => s.group;

	function handleSelect(event) {
		$$invalidate(0, value = event.detail.value);
	}

	function handleClear() {
		$$invalidate(0, value = "");
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, scales, groupBy, handleSelect, handleClear];
}

class ScaleSelector extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0 });
	}
}

export default ScaleSelector;